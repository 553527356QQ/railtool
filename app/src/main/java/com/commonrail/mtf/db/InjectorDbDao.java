package com.commonrail.mtf.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.commonrail.mtf.db.InjectorDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INJECTOR_DB".
*/
public class InjectorDbDao extends AbstractDao<InjectorDb, Void> {

    public static final String TABLENAME = "INJECTOR_DB";

    /**
     * Properties of entity InjectorDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InjectorType = new Property(0, String.class, "injectorType", false, "INJECTOR_TYPE");
        public final static Property OrderNum = new Property(1, Integer.class, "orderNum", false, "ORDER_NUM");
        public final static Property InjectorName = new Property(2, String.class, "injectorName", false, "INJECTOR_NAME");
        public final static Property IconUrl = new Property(3, String.class, "iconUrl", false, "ICON_URL");
    };


    public InjectorDbDao(DaoConfig config) {
        super(config);
    }
    
    public InjectorDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INJECTOR_DB\" (" + //
                "\"INJECTOR_TYPE\" TEXT," + // 0: injectorType
                "\"ORDER_NUM\" INTEGER," + // 1: orderNum
                "\"INJECTOR_NAME\" TEXT," + // 2: injectorName
                "\"ICON_URL\" TEXT);"); // 3: iconUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INJECTOR_DB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, InjectorDb entity) {
        stmt.clearBindings();
 
        String injectorType = entity.getInjectorType();
        if (injectorType != null) {
            stmt.bindString(1, injectorType);
        }
 
        Integer orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindLong(2, orderNum);
        }
 
        String injectorName = entity.getInjectorName();
        if (injectorName != null) {
            stmt.bindString(3, injectorName);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(4, iconUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public InjectorDb readEntity(Cursor cursor, int offset) {
        InjectorDb entity = new InjectorDb( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // injectorType
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // orderNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // injectorName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // iconUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, InjectorDb entity, int offset) {
        entity.setInjectorType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrderNum(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setInjectorName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIconUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(InjectorDb entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(InjectorDb entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
